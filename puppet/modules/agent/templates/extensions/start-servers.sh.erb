#!/bin/bash
# --------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# --------------------------------------------------------------
# This extension script will be executed to start the servers.
# --------------------------------------------------------------
#

# Execute error_handler function on script error
trap 'error_handler ${LINENO} $?' ERR

log=/var/log/apache-stratos/cartridge-agent-extensions-start.servers.log
VERBOSE=1
DATE=`which date`
ECHO=`which echo`
CD=`which cd`

export JAVA_HOME=/opt/java

if [[ -z $STRATOS_CLUSTERING ]]; then
   ${ECHO} -e  `date`": Starting servers..." | tee -a $log
   if [ ${VERBOSE} -eq 1 ]; then
      printParameters
   fi

else
   ${ECHO} -e  `date`": Starting servers in clustering mode..." | tee -a $log
   if [ ${VERBOSE} -eq 1 ]; then
      printParameters
   fi
   update_hosts_file
   configure_wk_members
fi

update_hosts_file

if [ -f ${STRATOS_APP_PATH}/wso2carbon.lck ]; then
    print_message "Server is already running...lock file exists"
else
    ${STRATOS_APP_PATH}/wso2server.sh > /dev/null 2>&1 & || print_error "Failed to run startup script"
fi

function printParameters(){
	${ECHO} -e  "LB IP: ${STRATOS_LB_IP}" | tee -a $log
	${ECHO} -e  "LB PUBLIC IP: $STRATOS_LB_PUBLIC_IP}" | tee -a $log
	${ECHO} -e  "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
	${ECHO} -e  "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
	${ECHO} -e  "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
	${ECHO} -e  "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
	${ECHO} -e  "APP_PATH: ${STRATOS_APP_PATH}" | tee -a $log
}

function error_handler(){
        MYSELF="$0"               # equals to script name
        LASTLINE="$1"            # argument 1: last line of error occurence
        LASTERR="$2"             # argument 2: error code of last command
        echo "ERROR in ${MYSELF}: line ${LASTLINE}: exit status of last command: ${LASTERR}"
	exit 1       
}

function print_message(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e "[INFO] " $1
	fi    
}

function print_ok(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e "[Done]"  	 
	fi
}

function print_error(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e " [Error]\n"$1
	else
    		${ECHO} -e "[Error] " $1
	fi
	exit 1
}

function update_hosts_file(){
        (${GREP} -q '<%= @stratos_instance_data_host_name %>' /etc/hosts || ${ECHO} "${STRATOS_LB_IP}  <%= @stratos_instance_data_host_name %>" >> /etc/hosts) && print_ok || print_error "Failed to update '/etc/hosts' file. "
	
}

backup_file(){
    if [[  -f "$1.orig" ]];
    then
        echo "Restoring from the Original template file $1"
        cp -f "$1.orig" "$1"
    else
        echo -e "Creating a backup of the file $1"
        cp -f "$1" "$1.orig"
    fi
}

function configure_wk_members(){

	print_message "Configuring well known members..."
	backup_file ${APP_PATH}/repository/conf/axis2.xml

	wk_xml=""
        keymgr_xml=""
	line="WELL_KNOWN_MEMBERS"
	AXIS2_XML_FILE=${APP_PATH}/repository/conf/axis2.xml
	API_MANAGER_XML_FILE=${APP_PATH}/repository/conf/api-manager.xml

	if [ "${STRATOS_SERVICE_GROUP}" = "apim" ] ; then
		if [ "${STRATOS_SERVICE_NAME}" = "apistore" ||  "${STRATOS_SERVICE_NAME}" = "publisher" ] ; then
			print_message "Configuring ${STRATOS_SERVICE_NAME}..."
			wk_xml="${wk_xml}<member><hostName>${STRATOS_WK_APISTORE_MEMBER_IP}</hostName><port>4000</port><member>"
			wk_xml="${wk_xml}<member><hostName>${STRATOS_WK_PUBLISHER_MEMBER_IP}</hostName><port>4000</port><member>"
			sed -i "s/${line}/${wk_xml}/g" ${AXIS2_XML_FILE} && print_message "Well known member configuration successful" || print_error "Failed to configure well known members"

			keymgr_xml="<ServerURL>https://${STRATOS_WK_KEYMGR_MEMBER_IP}:9443/services/</ServerURL>"
			sed -i "s/${line}/${keymgr_xml}/g" ${API_MANAGER_XML_FILE} && print_message "Keymanager member added" || print_error "Failed to add keymanager member"

		elif [ "${STRATOS_SERVICE_NAME}" = "keymanager" ] ; then
			print_message "Configuring keymanager..."

		elif [ "${STRATOS_SERVICE_NAME}" = "gateway" ] ; then
			print_message "Configuring gateway..."
			for i in `seq 2 ${STRATOS_WK_MEMBER_COUNT}`
			do		    		
				member_ip=STRATOS_WK_GATEWAY_MEMBER_$i_IP
				member_port=STRATOS_WK_GATEWAY_MEMBER_$i_PORT
				${ECHO} -e  "$i => ${!member_ip}:${!member_port}"
				$wk_xml="${wk_xml}<member><hostName>${!member_ip}</hostName><port>${!member_port}</port></member>"
			done
			sed -i "s/${line}/${wk_xml}/g" ${AXIS2_XML_FILE} && print_message "Well known member configuration successful" || print_error "Failed to configure well known members"

			keymgr_xml="<ServerURL>https://${STRATOS_WK_KEYMGR_MEMBER_IP}:9443/services/</ServerURL>"
			sed -i "s/${line}/${keymgr_xml}/g" ${API_MANAGER_XML_FILE} && print_message "Keymanager member added" || print_error "Failed to add keymanager member"
		fi

		
	else
		print_message "Configuring ${STRATOS_SERVICE_NAME}..."
		for i in `seq 2 ${STRATOS_WK_MEMBER_COUNT}`
		do		    		
			member_ip=STRATOS_WK_MEMBER_$i_IP
			member_port=STRATOS_WK_MEMBER_$i_PORT
			${ECHO} -e  "$i => ${!member_ip}:${!member_port}"
			$wk_xml="${wk_xml}<member><hostName>${!member_ip}</hostName><port>${!member_port}</port></member>"
		done
	fi
	
	

}

